#!/usr/bin/env node

require('rootpath')();

/**
 * Module dependencies.
 */

let app = require('app');
let http = require('http');
let config = require('config');
let debug = require('debug')('APP:server');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '4200');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io .
 */
const io = require('socket.io')(server);

/**
 * Session storagefor passport.socketio.
 * MUST BE THE SAME on app.js
 */

let
  session = require('express-session'),
  MySQLStore = require('connect-mysql')(session);

/**
 * Access passport.js user information from a socket.io connection.
 */

let passportSocketIo = require("passport.socketio");

//With Socket.io >= 1.0
io.use(passportSocketIo.authorize({
  cookieParser: require('cookie-parser'), // the same middleware you registrer in express
  key: 'connect.id', // the name of the cookie where express/connect stores its session_id
  secret: 'session_secret', // the session_secret to parse the cookie
  store: new MySQLStore({
    config: config.get('dbConfig')
  }), // we NEED to use a sessionstore. no memorystore please
  success: onAuthorizeSuccess, // *optional* callback on success - read more below
  fail: onAuthorizeFail, // *optional* callback on fail/error - read more below
}));

/**
 * Socket.io function import.
 */

let socket = require('routes/socket/crud');

io.on('connection', socket);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Callback for socket Authorize Success.
 */

function onAuthorizeSuccess(data, accept) {
  debug('successful connection to socket.io');

  // The accept-callback still allows us to decide whether to
  // accept the connection or not.
  accept(null, true);

}

/**
 * Callback for socket Authorize Fail.
 */

function onAuthorizeFail(data, message, error, accept) {
  if (error)
    throw new Error(message);
  debug('failed connection to socket.io:', message);

  // We use this callback to log all of our failed connections.
  accept(null, false);
}